Controller:
   Handles request and responces via handeleres(GET ,POST...) and use  providers via dependency injection.
   @Contoller('')  - decorator to create controller and bound to a paths.
   Handlers are methods within controller class (used with decorators as @GET, @POST ...)
   cli command :  nest g controller tasks 

Providers:
   can be injected into contructor if decorated as @injectable ,via dependency injection
   can be plain value, class, sync/async factory etc.

Services:
   defined as providers , not all providers are Services
   singleton when wrapped with @injectable() and provided in module.
    i.e  single instance will be shared across the application
   cli command :  nest g service tasks

Dependency injection in NestJs
   Any componnet in application can inject a provider that is decorated with @injectable() via injection with constructor.  
   It is used to define that a certain class should have a shared instance across the module. 
     The instance can then be injected using Dependency Injection, and all injectors will have access to the same instance and its state.

Model:
   can be interface or  class
     interfaces are TS concept that simply enforces shape of an object on compilation,
       after compilation interfaces are not preserved unlike classes which are preserved.
     classes are useful with objects with blueprint and add some self contained functionality via methods

DTO(data transfer obkect):
   -define the shape of data of incoming request and allow us to reuse definition throught-out application

   -object that carries data b/w processes
       or
   -object that used to encapsulate data and send from subsystem of application to other
      or
    -object that defines how the data will be sent on network
    -dto are not model,they are reffred to apecific tasks
    -can defined via interface or class
      nestjs use classes , so that it can be reffered in runtime also, as interface won't exist after compilation

Pipes:
   pipes  operates on the arguments to be processed by the route handler just before the handler is called.
   pipes can perform data transformation or data validation 
   pipes can throw exceptions exceptions thrown in the pipe will be handled by nestjs  and then parsed into an error response
   pipes can be a asynchronous 
   nestjs pipes are in @nestjs/common module
   BuildIns:
      1-ValidationPipe :validates compatibility of entire object against a class (ex DTOs)
          npm i class-validator class-transformer --save
          Ex:  1- in DTO:
                     @IsNotEmpty()
                     status: TaskStatus;
               in controller:
                  @Post()
                     @UsePipes(ValidationPipe)
                     createtask(@Body() createTaskDto: CreateTaskDto): CreateTaskDto {
                        return this.taskservice.createTask(createTaskDto);
                     }
            2- DTO:
                  export class filterDto {
                  @IsOptional()
                  @IsIn([TaskStatus.DONE, TaskStatus.IN_PROGRESS, TaskStatus.OPEN])
                  status: TaskStatus;
                  @IsOptional()
                  @IsNotEmpty()
                  search: string;
                  }
               in controller:
                  @Get()
                  getTasks(@Query(ValidationPipe) filterObj: filterDto): Task[] { }
         https://github.com/typestack/class-validator#validation-decorators
      2-ParseIntPipe :  by default Arguments are of type String.This pipe validates that an argument is a number ,
         if so the argument will then be transformed into a number  and passed onto the handler
   customs:
      custom  pipes are classes that are annotated with the @injectable decorator.
      pipes must implement the pipeTransform generic interface.Therefore every pipe must have a transform() method.
      transform() method accepts two parameters :
          value:  which is the value of the processed arguments and
          metadata (optional): object containing metadata about the argument 
         whatever is returned from the transfer method will be passed on to the root handler.
   Type:
     1-handler-level:which are defined at the handler level via @UsePipes(somePipe) decorator,
       process all parameters for the incoming requests.
          @Post()
          @UsePipes(somePipe)
          createtask(@Body() createTaskDto: CreateTaskDto){}
      2-parameter level : types which are defined in the parameter level.   
          Only that specific parameter for which the pipe has been specified will be processed.
           @Post()
           createtask(@Body('description',somePipe) description){}
      3-global types:These are defined at the application level and will be applied to any incoming request within the application.
        async function bootstrap() {
            const app = await NestFactory.create(AppModule);
            app.useGlobalPipes(somePipe)
            await app.listen(3000);
         }

Eroor exceptions:
  NotFoundException : 
    if (!found) {
      throw new NotFoundException(`task with id: ${id} not found`);
    }
   BadRequestException
      throw new BadRequestException(`satus value ${value} is invalid status`);
   